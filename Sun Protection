blueprint:
  name: Sun Protection
  description: close cover when sun is shining and open when stops
  domain: automation
  source_url: N/A
  input:
    cover_entity:
      name: cover
      selector:
        # target:
          entity:
            domain: cover
    indoor_temp_entity:
      name: sensor
      selector:
        # target:
          entity:
            domain: sensor
    sun_position_start:
      name: sun azimuth position start
      description: Sun azimuth. when sun is below this value, shutter could be triggered
      default: 89
      selector:
        number:
          min: 0
          max: 360
          unit_of_measurement: °
    sun_position_end:
      name: sun azimuth position end
      description: Sun azimuth. when sun is over this value, shutter could be triggered
      default: 200
      selector:
        number:
          min: 0
          max: 360
          unit_of_measurement: °
    sun_elevation_start:
      name: sun elevation to start
      description: Sun elevation. when sun is over this value, shutter could be triggered
      default: 32
      selector:
        number:
          min: -100
          max: 360
          unit_of_measurement: °
    weather:
      name: Weather service
      selector:
        entity:
          domain: weather
    indoor_temp:
      name: Indoor temperature
      description: Temperature above which the shutters will close
      default: 16
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: °C
    close_time:
      name: Closing time
      description: Duration the shutter closes (max 60s)
      default: 10
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: s
    temp_offset:
      name: Temperature Offset
      description: Temperature Offset to open Cover
      default: 1
      selector:
        number:
          min: 0
          max: 10
          unit_of_measurement: °C


variables:
  cover_e: !input cover_entity
  indoor_temp_e: !input indoor_temp_entity
  var_e: "{{ 'var.' + cover_e[6:] }}"
  protection_begin: !input sun_position_start
  protection_end: !input sun_position_end
  elevation_begin: !input sun_elevation_start
  indoor_temp: !input indoor_temp
  weather_service: !input weather
  offset: !input temp_offset

mode: parallel

trigger:
  - platform: time_pattern
    minutes: "/5"
  
condition:
  condition: sun
  before: sunset
  after: sunrise

action:
  - choose:
      ##########################################################
      # close cover
      ##########################################################
      - conditions:
          - condition: template
            value_template: "{{- is_state('input_boolean.cover_manage_cover_with_sun', 'on') -}}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ states(weather_service) == 'partlycloudy' }}"
              - condition: template
                value_template: "{{ states(weather_service) == 'sunny' }}"
          - condition: template
            value_template: "{{ states(var_e) != '1' }}"
          - condition: template
            value_template: "{{ state_attr('sun.sun', 'azimuth') > protection_begin and state_attr('sun.sun', 'azimuth') < protection_end and state_attr('sun.sun', 'elevation') > elevation_begin }}"
          - condition: template
            value_template: "{{ states(indoor_temp_e) > indoor_temp }}"
        sequence:
          - data_template:
              entity_id: "{{ cover_e }}"
            service: cover.close_cover
          - delay:
              seconds: !input "close_time"
          - data_template:
              entity_id: "{{ cover_e }}"
            service: cover.stop_cover
          - condition: template
            value_template: "{{ states(cover_e) == 'closed' }}"
          - data:
              entity_id: "{{ var_e }}"
              value: 1
            service: var.set

      ##########################################################
      # open cover
      ##########################################################
      - conditions:
          - condition: template
            value_template: "{{ states(var_e) == '1' }}"
          - condition: template
            value_template: "{{ (state_attr('sun.sun', 'azimuth') < protection_begin or state_attr('sun.sun', 'azimuth') > protection_end or  state_attr('sun.sun', 'elevation') < elevation_begin) or states(indoor_temp_e) < indoor_temp - offset }}"

        sequence:
          - data_template:
              entity_id: "{{ cover_e }}"
            service: cover.open_cover
          - condition: template
            value_template: "{{ states(cover_e) == 'open' }}"
          - data:
              entity_id: "{{ var_e }}"
              value: 0
            service: var.set
